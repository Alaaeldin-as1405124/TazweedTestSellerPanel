{"ast":null,"code":"import _classCallCheck from\"/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Geosuggest from'react-geosuggest';import Autocomplete from'react-google-autocomplete';import LocationPicker from'react-location-picker';import Map from\"./Map\";import{GoogleMap}from\"react-google-maps\";/* Default position */var MapView=/*#__PURE__*/function(_Component){_inherits(MapView,_Component);function MapView(){var _getPrototypeOf2;var _this;_classCallCheck(this,MapView);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(MapView)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={address:\"New Cairo\",position:{lat:30.017792,lng:31.3473752}};_this.checkProps=function(props){if(props&&props.location){var location=props.location;if(location.longitude){_this.setState({address:location.address,position:{lat:location.latitude,lng:location.longitude}});//console.log(this.state)\n}}};_this.update=function(){if(_this.props&&_this.props.update)_this.props.update(_this.state.position,_this.state.address);};_this.handleLocationChange=function(_ref){var position=_ref.position,address=_ref.address,places=_ref.places;// Set new location\n_this.setState({position:position,address:address},function(){return _this.update();});};_this.onSuggestSelect=function(suggest){if(suggest&&suggest.label)_this.setState({position:suggest.location,address:suggest.label},function(){return _this.update();});//console.log(suggest);\n//this._geoSuggest.blur();\n};return _this;}_createClass(MapView,[{key:\"componentWillReceiveProps\",value:function componentWillReceiveProps(nextProps,nextContext){this.checkProps(nextProps);}},{key:\"componentWillMount\",value:function componentWillMount(){this.checkProps(this.props);}},{key:\"componentDidMount\",value:function componentDidMount(){this.update();}},{key:\"render\",value:function render(){var _this2=this;return React.createElement(\"div\",null,React.createElement(\"h4\",null,this.state.address),React.createElement(\"div\",null,React.createElement(Geosuggest,{style:{width:'100%',height:'40px',paddingLeft:'16px',marginTop:'2px',marginBottom:'100px'},ref:function ref(el){return _this2._geoSuggest=el;},country:'EG',onSuggestSelect:this.onSuggestSelect}),React.createElement(LocationPicker,{containerElement:React.createElement(\"div\",{style:{height:'100%'}}),mapElement:React.createElement(\"div\",{style:{height:'400px'}}),defaultPosition:{lat:this.state.position.lat,lng:this.state.position.lng},onChange:this.handleLocationChange,radius:1,zoom:15})));}}]);return MapView;}(Component);export default MapView;","map":{"version":3,"sources":["/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/src/customComponents/MapView.js"],"names":["React","Component","Geosuggest","Autocomplete","LocationPicker","Map","GoogleMap","MapView","state","address","position","lat","lng","checkProps","props","location","longitude","setState","latitude","update","handleLocationChange","places","onSuggestSelect","suggest","label","nextProps","nextContext","width","height","paddingLeft","marginTop","marginBottom","el","_geoSuggest"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Geosuggest from 'react-geosuggest';\nimport Autocomplete from 'react-google-autocomplete';\nimport LocationPicker from 'react-location-picker';\nimport Map from \"./Map\";\nimport {GoogleMap} from \"react-google-maps\";\n\n/* Default position */\n\n\nclass MapView extends Component {\n    state = {\n        address: \"New Cairo\",\n        position: {\n            lat: 30.017792,\n            lng: 31.3473752,\n        },\n\n    };\n\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        this.checkProps(nextProps);\n    }\n\n    componentWillMount() {\n        this.checkProps(this.props);\n    }\n\n    componentDidMount() {\n        this.update();\n    }\n\n    checkProps = (props) => {\n        if (props && props.location) {\n            let location = props.location;\n            if(location.longitude){\n                this.setState({\n                    address: location.address,\n                    position:{\n                        lat: location.latitude,\n                        lng: location.longitude}\n                })\n                //console.log(this.state)\n            }\n\n        }\n    };\n\n    update = () => {\n        if (this.props && this.props.update)\n            this.props.update(this.state.position, this.state.address)\n    };\n\n    handleLocationChange = ({position, address, places}) =>{\n\n        // Set new location\n        this.setState({position,address}, () => this.update());\n    }\n\n    onSuggestSelect = (suggest) => {\n        if (suggest && suggest.label)\n            this.setState({position: suggest.location, address: suggest.label}, () => this.update());\n        //console.log(suggest);\n\n        //this._geoSuggest.blur();\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h4>{this.state.address}</h4>\n                <div>\n                    <Geosuggest\n                        style={{\n                            width: '100%',\n                            height: '40px',\n                            paddingLeft: '16px',\n                            marginTop: '2px',\n                            marginBottom: '100px'\n                        }}\n                        ref={el => this._geoSuggest = el}\n                        country={'EG'}\n                        onSuggestSelect={this.onSuggestSelect}\n                    />\n                    <LocationPicker\n                        containerElement={<div style={{height: '100%'}}/>}\n                        mapElement={<div style={{height: '400px'}}/>}\n                        defaultPosition={{\n                            lat: this.state.position.lat,\n                            lng: this.state.position.lng\n                        }}\n                        onChange={this.handleLocationChange}\n                        radius={1}\n                        zoom={15}\n                    />\n\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MapView\n"]},"metadata":{},"sourceType":"module"}
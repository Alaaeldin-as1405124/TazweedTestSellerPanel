{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction arrayMove(array, from, to) {\n  array = array.slice();\n  array.splice(to < 0 ? array.length + to : to, 0, array.splice(from, 1)[0]);\n  return array;\n}\n\nexports.arrayMove = arrayMove;\n\nfunction arrayRemove(array, index) {\n  array = array.slice();\n  array.splice(index, 1);\n  return array;\n}\n\nexports.arrayRemove = arrayRemove;\n\nfunction getTranslateOffset(element) {\n  var style = window.getComputedStyle(element);\n  return Math.max(parseInt(style['margin-top'], 10), parseInt(style['margin-bottom'], 10)) + element.getBoundingClientRect().height;\n}\n\nexports.getTranslateOffset = getTranslateOffset;\n\nfunction isTouchEvent(event) {\n  return event.touches && event.touches.length || event.changedTouches && event.changedTouches.length;\n}\n\nexports.isTouchEvent = isTouchEvent;\n\nfunction transformItem(element, offsetY, offsetX) {\n  if (offsetY === void 0) {\n    offsetY = 0;\n  }\n\n  if (offsetX === void 0) {\n    offsetX = 0;\n  }\n\n  if (offsetY === null || offsetX === null) {\n    element.style.removeProperty('transform');\n    return;\n  }\n\n  element.style.transform = \"translate(\" + offsetX + \"px, \" + offsetY + \"px)\";\n}\n\nexports.transformItem = transformItem;\n\nfunction isItemTransformed(element) {\n  return !!element.style.transform;\n}\n\nexports.isItemTransformed = isItemTransformed;\n\nfunction setItemTransition(element, duration) {\n  element.style['transition-duration'] = duration + \"ms\";\n}\n\nexports.setItemTransition = setItemTransition; // returns the \"slot\" for the targetValue, aka where it should go\n// in an ordered \"array\", it starts with -1 index\n\nfunction binarySearch(array, targetValue) {\n  var min = 0;\n  var max = array.length - 1;\n  var guess;\n\n  while (min <= max) {\n    guess = Math.floor((max + min) / 2);\n\n    if (!array[guess + 1] || array[guess] <= targetValue && array[guess + 1] >= targetValue) {\n      return guess;\n    } else if (array[guess] < targetValue && array[guess + 1] < targetValue) {\n      min = guess + 1;\n    } else {\n      max = guess - 1;\n    }\n  }\n\n  return -1;\n}\n\nexports.binarySearch = binarySearch; // adapted from https://github.com/alexreardon/raf-schd\n\nexports.schd = function (fn) {\n  var lastArgs = [];\n  var frameId = null;\n\n  var wrapperFn = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    lastArgs = args;\n\n    if (frameId) {\n      return;\n    }\n\n    frameId = requestAnimationFrame(function () {\n      frameId = null;\n      fn.apply(void 0, lastArgs);\n    });\n  };\n\n  return wrapperFn;\n};\n\nfunction checkIfInteractive(target, rootElement) {\n  var DISABLED_ELEMENTS = ['input', 'textarea', 'select', 'option', 'button', 'a'];\n\n  while (target !== rootElement) {\n    if (target.getAttribute('data-movable-handle')) {\n      return false;\n    }\n\n    if (DISABLED_ELEMENTS.includes(target.tagName.toLowerCase())) {\n      return true;\n    }\n\n    var role = target.getAttribute('role');\n\n    if (role === 'button' || role === 'link') {\n      return true;\n    }\n\n    if (target.tagName) target = target.parentElement;\n  }\n\n  return false;\n}\n\nexports.checkIfInteractive = checkIfInteractive;","map":null,"metadata":{},"sourceType":"script"}
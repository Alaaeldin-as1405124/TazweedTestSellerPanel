{"ast":null,"code":"var _jsxFileName = \"/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/src/customComponents/MapView.js\";\nimport React, { Component } from 'react';\nimport Geosuggest from 'react-geosuggest';\nimport Autocomplete from 'react-google-autocomplete';\nimport LocationPicker from 'react-location-picker';\nimport Map from \"./Map\";\nimport { GoogleMap } from \"react-google-maps\";\n/* Default position */\n\nclass MapView extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.checkProps = props => {\n      if (props && props.location) {\n        let location = props.location;\n        this.setState({\n          address: location.address,\n          lat: location.latitude,\n          lng: location.longitude\n        });\n      }\n    };\n\n    this.onSuggestSelect = suggest => {\n      if (suggest && suggest.label) this.setState({\n        position: suggest.location,\n        address: suggest.label\n      });\n      console.log(suggest); //this._geoSuggest.blur();\n    };\n\n    this.state = {\n      address: \"New Cairo\",\n      position: {\n        lat: 30.017792,\n        lng: 31.3473752\n      }\n    }; // Bind\n\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.checkProps(nextProps);\n  }\n\n  componentWillMount() {\n    this.checkProps(this.props);\n  }\n\n  handleLocationChange({\n    position,\n    address,\n    places\n  }) {\n    // Set new location\n    this.setState({\n      position\n    }, () => {\n      if (this.props && this.props.update) this.update(this.state.position, this.state.address);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, this.state.address), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Geosuggest, {\n      style: {\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        marginTop: '2px',\n        marginBottom: '100px'\n      },\n      ref: el => this._geoSuggest = el,\n      country: 'EG',\n      onSuggestSelect: this.onSuggestSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(LocationPicker, {\n      containerElement: React.createElement(\"div\", {\n        style: {\n          height: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }),\n      mapElement: React.createElement(\"div\", {\n        style: {\n          height: '400px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }),\n      defaultPosition: {\n        lat: this.state.position.lat,\n        lng: this.state.position.lng\n      },\n      onChange: this.handleLocationChange,\n      radius: 1,\n      zoom: 15,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default MapView;","map":{"version":3,"sources":["/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/src/customComponents/MapView.js"],"names":["React","Component","Geosuggest","Autocomplete","LocationPicker","Map","GoogleMap","MapView","constructor","props","checkProps","location","setState","address","lat","latitude","lng","longitude","onSuggestSelect","suggest","label","position","console","log","state","handleLocationChange","bind","componentWillReceiveProps","nextProps","nextContext","componentWillMount","places","update","render","width","height","paddingLeft","marginTop","marginBottom","el","_geoSuggest"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Geosuggest from 'react-geosuggest';\nimport Autocomplete from 'react-google-autocomplete';\nimport LocationPicker from 'react-location-picker';\nimport Map from \"./Map\";\nimport {GoogleMap} from \"react-google-maps\";\n\n/* Default position */\n\n\nclass MapView extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            address: \"New Cairo\",\n            position: {\n                lat: 30.017792,\n                lng: 31.3473752,\n            },\n\n        };\n\n        // Bind\n        this.handleLocationChange = this.handleLocationChange.bind(this);\n    }\n    componentWillReceiveProps(nextProps, nextContext) {\n        this.checkProps(nextProps);\n    }\n    componentWillMount() {\n        this.checkProps(this.props);\n    }\n    checkProps = (props) =>{\n        if(props && props.location){\n            let location = props.location;\n            this.setState({\n                address:location.address,\n                lat:location.latitude,\n                lng:location.longitude\n            })\n        }\n    }\n\n    handleLocationChange({position, address, places}) {\n\n        // Set new location\n        this.setState({position},()=>{\n            if(this.props && this.props.update)\n                this.update(this.state.position,this.state.address)\n        });\n    }\n\n    onSuggestSelect = (suggest) => {\n        if (suggest && suggest.label)\n            this.setState({position: suggest.location, address: suggest.label});\n        console.log(suggest);\n\n            //this._geoSuggest.blur();\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h4>{this.state.address}</h4>\n                <div>\n                    <Geosuggest\n                        style={{\n                            width: '100%',\n                            height: '40px',\n                            paddingLeft: '16px',\n                            marginTop: '2px',\n                            marginBottom: '100px'\n                        }}\n                        ref={el => this._geoSuggest = el}\n                        country={'EG'}\n                        onSuggestSelect={this.onSuggestSelect}\n                    />\n                    <LocationPicker\n                        containerElement={<div style={{height: '100%'}}/>}\n                        mapElement={<div style={{height: '400px'}}/>}\n                        defaultPosition={{\n                            lat: this.state.position.lat,\n                            lng: this.state.position.lng\n                        }}\n                        onChange={this.handleLocationChange}\n                        radius={1}\n                        zoom={15}\n                    />\n\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MapView\n"]},"metadata":{},"sourceType":"module"}
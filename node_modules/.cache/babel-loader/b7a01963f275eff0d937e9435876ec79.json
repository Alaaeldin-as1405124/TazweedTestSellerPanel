{"ast":null,"code":"var _jsxFileName = \"/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/src/customComponents/Map.js\";\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nimport Geosuggest from 'react-geosuggest';\nGeocode.setApiKey(\"AIzaSyAaxgJDGWwSd_eVAtGKssp7wHd-z7ZpZy8\");\nGeocode.enableDebug();\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {};\n\n    this.onPlaceSelected = place => {\n      const address = place.formatted_address,\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    this.onMarkerDragEnd = event => {\n      console.log('event', event);\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      console.log('new shist', newLng, ' lat', newLat);\n    };\n\n    this.state = {\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n   * Get the current address from the default map position and set those values in the state\n   */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      console.log('did mount', response);\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  /**\n   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n   *\n   * @param nextProps\n   * @param nextState\n   * @return {boolean}\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n   * And function for city,state and address input\n   * @param event\n   */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Geosuggest, {\n      country: 'EG',\n      onSuggestSelect: this.onPlaceSelected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      google: this.props.google,\n      name: 'Dolores park',\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      position: {\n        lat: this.state.markerPosition.lat + 0.0018,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        padding: 0,\n        margin: 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, this.state.address))))));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAaxgJDGWwSd_eVAtGKssp7wHd-z7ZpZy8&libraries=places\",\n        loadingElement: React.createElement(\"div\", {\n          style: {\n            height: \"100%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }),\n        containerElement: React.createElement(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }),\n        mapElement: React.createElement(\"div\", {\n          style: {\n            height: \"100%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }));\n    } else {\n      map = React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/src/customComponents/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","Geosuggest","setApiKey","enableDebug","Map","Component","constructor","props","onChange","event","setState","target","name","value","onInfoWindowClose","onPlaceSelected","place","address","formatted_address","latValue","geometry","location","lat","lngValue","lng","markerPosition","mapPosition","onMarkerDragEnd","console","log","newLat","latLng","newLng","addressArray","state","center","componentDidMount","fromLatLng","then","response","error","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","padding","margin","map","undefined","height"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\n\nimport Geosuggest from 'react-geosuggest';\nGeocode.setApiKey(\"AIzaSyAaxgJDGWwSd_eVAtGKssp7wHd-z7ZpZy8\");\nGeocode.enableDebug();\n\nclass Map extends React.Component{\n    constructor( props ){\n        super( props );\n        this.state = {\n            mapPosition: {\n                lat: this.props.center.lat,\n                lng: this.props.center.lng\n            },\n            markerPosition: {\n                lat: this.props.center.lat,\n                lng: this.props.center.lng\n            }\n        }\n    }\n    /**\n     * Get the current address from the default map position and set those values in the state\n     */\n    componentDidMount() {\n        Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\n            response => {\n                console.log('did mount',response)\n            },\n            error => {\n                console.error(error);\n            }\n        );\n    };\n    /**\n     * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n     *\n     * @param nextProps\n     * @param nextState\n     * @return {boolean}\n     */\n    shouldComponentUpdate( nextProps, nextState ){\n        if (\n            this.state.markerPosition.lat !== this.props.center.lat\n        ) {\n            return true\n        } else if ( this.props.center.lat === nextProps.center.lat ){\n            return false\n        }\n    }\n\n    /**\n     * And function for city,state and address input\n     * @param event\n     */\n    onChange = ( event ) => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n    /**\n     * This Event triggers when the marker window is closed\n     *\n     * @param event\n     */\n    onInfoWindowClose = ( event ) => {\n    };\n    /**\n     * When the user types an address in the search box\n     * @param place\n     */\n    onPlaceSelected = ( place ) => {\n        const address = place.formatted_address,\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng();\n// Set these values in the state.\n        this.setState({\n            markerPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n            mapPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n        })\n    };\n    /**\n     * When the marker is dragged you get the lat and long using the functions available from event object.\n     * Use geocode to get the address, city, area and state from the lat and lng positions.\n     * And then set those values in the state.\n     *\n     * @param event\n     */\n    onMarkerDragEnd = ( event ) => {\n        console.log( 'event', event );\n        let newLat = event.latLng.lat(),\n            newLng = event.latLng.lng(),\n            addressArray = [];\n       console.log('new shist',newLng,' lat',newLat)\n    };\n    render(){\n        const AsyncMap = withScriptjs(\n            withGoogleMap(\n                props => (\n                    <GoogleMap google={this.props.google}\n                               defaultZoom={this.props.zoom}\n                               defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n                    >\n                        {/* For Auto complete Search Box */}\n                        <Geosuggest\n                            country={'EG'}\n                            onSuggestSelect={this.onPlaceSelected}\n                        />\n\n                        {/*Marker*/}\n                        <Marker google={this.props.google}\n                                name={'Dolores park'}\n                                draggable={true}\n                                onDragEnd={ this.onMarkerDragEnd }\n                                position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n                        />\n                        <Marker />\n                        {/* InfoWindow on top of marker */}\n                        <InfoWindow\n                            onClose={this.onInfoWindowClose}\n                            position={{ lat: ( this.state.markerPosition.lat + 0.0018 ), lng: this.state.markerPosition.lng }}\n                        >\n                            <div>\n                                <span style={{ padding: 0, margin: 0 }}>{ this.state.address }</span>\n                            </div>\n                        </InfoWindow>\n                    </GoogleMap>\n                )\n            )\n        );\n        let map;\n        if( this.props.center.lat !== undefined ) {\n            map = <div>\n                <AsyncMap\n                    googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAaxgJDGWwSd_eVAtGKssp7wHd-z7ZpZy8&libraries=places\"\n                    loadingElement={\n                        <div style={{ height: `100%` }} />\n                    }\n                    containerElement={\n                        <div style={{ height: this.props.height }} />\n                    }\n                    mapElement={\n                        <div style={{ height: `100%` }} />\n                    }\n                />\n            </div>\n        } else {\n            map = <div style={{height: this.props.height}} />\n        }\n        return( map )\n    }\n}\nexport default Map\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/src/customComponents/SortableList.js\";\nimport React from 'react';\nimport Sortable from 'react-sortablejs';\nimport { Button, ListGroup } from \"react-bootstrap\"; // Functional Component\n\nconst SortableList = ({\n  items,\n  reOrder,\n  renderItem\n}) => {\n  let sortable = null; // sortable instance\n\n  const listItems = items.map((file, index) => {\n    if (file && file.type && file.link) return renderItem(file, index);\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(Sortable // Sortable options (https://github.com/RubaXa/Sortable#options)\n  , {\n    options: {} // [Optional] Use ref to get the sortable instance\n    // https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute\n    ,\n    ref: c => {\n      if (c) {\n        sortable = c.sortable;\n      }\n    } // [Optional] A tag or react component to specify the wrapping element. Defaults to \"div\".\n    // In a case of a react component it is required to has children in the component\n    // and pass it down.\n    ,\n    tag: \"div\" // [Optional] The onChange method allows you to implement a controlled component and keep\n    // DOM nodes untouched. You have to change state to re-render the component.\n    // @param {Array} order An ordered array of items defined by the `data-id` attribute.\n    // @param {Object} sortable The sortable instance.\n    // @param {Event} evt The event object.\n    ,\n    onChange: (order, sortable, evt) => {\n      console.log('order ', order, '\\n sortable ', sortable, '\\n evt', evt);\n      reOrder(order);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, listItems));\n};\n\nexport default SortableList;","map":{"version":3,"sources":["/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/src/customComponents/SortableList.js"],"names":["React","Sortable","Button","ListGroup","SortableList","items","reOrder","renderItem","sortable","listItems","map","file","index","type","link","c","order","evt","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,SAAQC,MAAR,EAAgBC,SAAhB,QAAgC,iBAAhC,C,CAEA;;AACA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,OAAT;AAAiBC,EAAAA;AAAjB,CAAD,KAAmC;AACpD,MAAIC,QAAQ,GAAG,IAAf,CADoD,CAC/B;;AAErB,QAAMC,SAAS,GAAGJ,KAAK,CAACK,GAAN,CAAU,CAACC,IAAD,EAAMC,KAAN,KAAgB;AACxC,QAAGD,IAAI,IAAIA,IAAI,CAACE,IAAb,IAAqBF,IAAI,CAACG,IAA7B,EACI,OAAOP,UAAU,CAACI,IAAD,EAAMC,KAAN,CAAjB;AACP,GAHiB,CAAlB;AAOA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,QAAD,CACI;AADJ;AAEI,IAAA,OAAO,EAAE,EAFb,CAKI;AACA;AANJ;AAOI,IAAA,GAAG,EAAGG,CAAD,IAAO;AACR,UAAIA,CAAJ,EAAO;AACHP,QAAAA,QAAQ,GAAGO,CAAC,CAACP,QAAb;AACH;AACJ,KAXL,CAaI;AACA;AACA;AAfJ;AAgBI,IAAA,GAAG,EAAC,KAhBR,CAkBI;AACA;AACA;AACA;AACA;AAtBJ;AAuBI,IAAA,QAAQ,EAAE,CAACQ,KAAD,EAAQR,QAAR,EAAkBS,GAAlB,KAA0B;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBH,KAArB,EAA2B,cAA3B,EAA0CR,QAA1C,EAAmD,QAAnD,EAA4DS,GAA5D;AACAX,MAAAA,OAAO,CAACU,KAAD,CAAP;AACH,KA1BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA4BKP,SA5BL,CAFJ,CADJ;AAmCH,CA7CD;;AAiDA,eAAeL,YAAf","sourcesContent":["import React from 'react';\nimport Sortable from 'react-sortablejs';\nimport {Button, ListGroup} from \"react-bootstrap\";\n\n// Functional Component\nconst SortableList = ({ items, reOrder,renderItem }) => {\n    let sortable = null; // sortable instance\n\n    const listItems = items.map((file,index) => {\n        if(file && file.type && file.link)\n            return(renderItem(file,index))\n    }\n\n    );\n\n    return (\n        <div>\n\n            <Sortable\n                // Sortable options (https://github.com/RubaXa/Sortable#options)\n                options={{\n                }}\n\n                // [Optional] Use ref to get the sortable instance\n                // https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute\n                ref={(c) => {\n                    if (c) {\n                        sortable = c.sortable;\n                    }\n                }}\n\n                // [Optional] A tag or react component to specify the wrapping element. Defaults to \"div\".\n                // In a case of a react component it is required to has children in the component\n                // and pass it down.\n                tag=\"div\"\n\n                // [Optional] The onChange method allows you to implement a controlled component and keep\n                // DOM nodes untouched. You have to change state to re-render the component.\n                // @param {Array} order An ordered array of items defined by the `data-id` attribute.\n                // @param {Object} sortable The sortable instance.\n                // @param {Event} evt The event object.\n                onChange={(order, sortable, evt) => {\n                    console.log('order ',order,'\\n sortable ',sortable,'\\n evt',evt)\n                    reOrder(order);\n                }}\n            >\n                {listItems}\n            </Sortable>\n        </div>\n    );\n};\n\n\n\nexport default SortableList;\n"]},"metadata":{},"sourceType":"module"}
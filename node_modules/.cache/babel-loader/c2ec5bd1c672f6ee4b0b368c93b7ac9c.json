{"ast":null,"code":"var _jsxFileName = \"/Users/alaaeldin/Documents/GitHub/TazweedAdminPanel/src/customComponents/SortableList.js\";\nimport React from 'react';\nimport Sortable from 'react-sortablejs'; // Functional Component\n\nconst SortableList = ({\n  items,\n  reOrder,\n  renderItem\n}) => {\n  let sortable = null; // sortable instance\n\n  const listItems = items.map((file, index) => {\n    return React.createElement(\"div\", {\n      \"data-id\": index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, renderItem(file, index));\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(Sortable // Sortable options (https://github.com/RubaXa/Sortable#options)\n  , {\n    options: {} // [Optional] Use ref to get the sortable instance\n    // https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute\n    ,\n    ref: c => {\n      if (c) {\n        sortable = c.sortable;\n      }\n    } // [Optional] A tag or react component to specify the wrapping element. Defaults to \"div\".\n    // In a case of a react component it is required to has children in the component\n    // and pass it down.\n    ,\n    tag: \"div\" // [Optional] The onChange method allows you to implement a controlled component and keep\n    // DOM nodes untouched. You have to change state to re-render the component.\n    // @param {Array} order An ordered array of items defined by the `data-id` attribute.\n    // @param {Object} sortable The sortable instance.\n    // @param {Event} evt The event object.\n    ,\n    onChange: (order, sortable, evt) => {\n      //console.log('order ', order, '\\n sortable ', sortable, '\\n evt', evt)\n      //do the sorting\n      let newIndex = evt.newIndex;\n      let oldIndex = evt.oldIndex; //console.log('old index ',oldIndex,'\\n new Index ',newIndex)\n\n      let newOrderedFiles = [...items];\n      let temp = newOrderedFiles[oldIndex];\n      newOrderedFiles[oldIndex] = newOrderedFiles[newIndex];\n      newOrderedFiles[newIndex] = temp; //let newOrderFiles = doSorting(items,order)\n      //console.log(newOrderFiles)\n\n      reOrder(newOrderedFiles);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, listItems));\n};\n\nexport default SortableList;","map":{"version":3,"sources":["/Users/alaaeldin/Documents/GitHub/TazweedAdminPanel/src/customComponents/SortableList.js"],"names":["React","Sortable","SortableList","items","reOrder","renderItem","sortable","listItems","map","file","index","c","order","evt","newIndex","oldIndex","newOrderedFiles","temp"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB,C,CAEA;;AACA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,OAAR;AAAiBC,EAAAA;AAAjB,CAAD,KAAkC;AACnD,MAAIC,QAAQ,GAAG,IAAf,CADmD,CAC9B;;AAErB,QAAMC,SAAS,GAAGJ,KAAK,CAACK,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAErC,WAAQ;AAAK,iBAASA,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsBL,UAAU,CAACI,IAAD,EAAOC,KAAP,CAAhC,CAAR;AACH,GAHa,CAAlB;AAMA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,QAAD,CACI;AADJ;AAEI,IAAA,OAAO,EAAE,EAFb,CAII;AACA;AALJ;AAMI,IAAA,GAAG,EAAGC,CAAD,IAAO;AACR,UAAIA,CAAJ,EAAO;AACHL,QAAAA,QAAQ,GAAGK,CAAC,CAACL,QAAb;AACH;AACJ,KAVL,CAYI;AACA;AACA;AAdJ;AAeI,IAAA,GAAG,EAAC,KAfR,CAiBI;AACA;AACA;AACA;AACA;AArBJ;AAsBI,IAAA,QAAQ,EAAE,CAACM,KAAD,EAAQN,QAAR,EAAkBO,GAAlB,KAA0B;AAChC;AACA;AACA,UAAIC,QAAQ,GAAGD,GAAG,CAACC,QAAnB;AACA,UAAIC,QAAQ,GAAGF,GAAG,CAACE,QAAnB,CAJgC,CAKhC;;AACA,UAAIC,eAAe,GAAG,CAAC,GAAGb,KAAJ,CAAtB;AACA,UAAIc,IAAI,GAAGD,eAAe,CAACD,QAAD,CAA1B;AACAC,MAAAA,eAAe,CAACD,QAAD,CAAf,GAA4BC,eAAe,CAACF,QAAD,CAA3C;AACAE,MAAAA,eAAe,CAACF,QAAD,CAAf,GAA4BG,IAA5B,CATgC,CAUhC;AACA;;AACAb,MAAAA,OAAO,CAACY,eAAD,CAAP;AACH,KAnCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAqCKT,SArCL,CAFJ,CADJ;AA4CH,CArDD;;AAwDA,eAAeL,YAAf","sourcesContent":["import React from 'react';\nimport Sortable from 'react-sortablejs';\n\n// Functional Component\nconst SortableList = ({items, reOrder, renderItem}) => {\n    let sortable = null; // sortable instance\n\n    const listItems = items.map((file, index) => {\n\n            return (<div data-id={index}>{renderItem(file, index)}</div>)\n        }\n    );\n\n    return (\n        <div>\n\n            <Sortable\n                // Sortable options (https://github.com/RubaXa/Sortable#options)\n                options={{}}\n\n                // [Optional] Use ref to get the sortable instance\n                // https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute\n                ref={(c) => {\n                    if (c) {\n                        sortable = c.sortable;\n                    }\n                }}\n\n                // [Optional] A tag or react component to specify the wrapping element. Defaults to \"div\".\n                // In a case of a react component it is required to has children in the component\n                // and pass it down.\n                tag=\"div\"\n\n                // [Optional] The onChange method allows you to implement a controlled component and keep\n                // DOM nodes untouched. You have to change state to re-render the component.\n                // @param {Array} order An ordered array of items defined by the `data-id` attribute.\n                // @param {Object} sortable The sortable instance.\n                // @param {Event} evt The event object.\n                onChange={(order, sortable, evt) => {\n                    //console.log('order ', order, '\\n sortable ', sortable, '\\n evt', evt)\n                    //do the sorting\n                    let newIndex = evt.newIndex;\n                    let oldIndex = evt.oldIndex;\n                    //console.log('old index ',oldIndex,'\\n new Index ',newIndex)\n                    let newOrderedFiles = [...items];\n                    let temp = newOrderedFiles[oldIndex];\n                    newOrderedFiles[oldIndex] = newOrderedFiles[newIndex];\n                    newOrderedFiles[newIndex] = temp;\n                    //let newOrderFiles = doSorting(items,order)\n                    //console.log(newOrderFiles)\n                    reOrder(newOrderedFiles);\n                }}\n            >\n                {listItems}\n            </Sortable>\n        </div>\n    );\n};\n\n\nexport default SortableList;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/src/customComponents/Map.js\";\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0\");\nGeocode.enableDebug();\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCity = addressArray => {\n      let city = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {};\n\n    this.onPlaceSelected = place => {\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    this.onMarkerDragEnd = event => {\n      console.log('event', event);\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : ''\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n   * Get the current address from the default map position and set those values in the state\n   */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log('city', city, area, state);\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : ''\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  /**\n   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n   *\n   * @param nextProps\n   * @param nextState\n   * @return {boolean}\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n   * Get the city and set the city input value to the one selected\n   *\n   * @param addressArray\n   * @return {string}\n   */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(Autocomplete, {\n      style: {\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        marginTop: '2px',\n        marginBottom: '100px'\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: ['(regions)'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      google: this.props.google,\n      name: 'Dolores park',\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      position: {\n        lat: this.state.markerPosition.lat + 0.0018,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        padding: 0,\n        margin: 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, this.state.address))))));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, \"City\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"city\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.city,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, \"Area\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"area\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.area,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, \"State\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"state\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, \"Address\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }))), React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0&libraries=places\",\n        loadingElement: React.createElement(\"div\", {\n          style: {\n            height: \"100%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261\n          },\n          __self: this\n        }),\n        containerElement: React.createElement(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264\n          },\n          __self: this\n        }),\n        mapElement: React.createElement(\"div\", {\n          style: {\n            height: \"100%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }));\n    } else {\n      map = React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/src/customComponents/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","setApiKey","enableDebug","Map","Component","constructor","props","getCity","addressArray","city","i","length","types","long_name","getArea","area","j","getState","state","onChange","event","setState","target","name","value","onInfoWindowClose","onPlaceSelected","place","address","formatted_address","address_components","latValue","geometry","location","lat","lngValue","lng","markerPosition","mapPosition","onMarkerDragEnd","console","log","newLat","latLng","newLng","fromLatLng","then","response","results","error","center","componentDidMount","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","width","height","paddingLeft","marginTop","marginBottom","padding","margin","map","undefined"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0\");\nGeocode.enableDebug();\n\nclass Map extends React.Component{\n    constructor( props ){\n        super( props );\n        this.state = {\n            address: '',\n            city: '',\n            area: '',\n            state: '',\n            mapPosition: {\n                lat: this.props.center.lat,\n                lng: this.props.center.lng\n            },\n            markerPosition: {\n                lat: this.props.center.lat,\n                lng: this.props.center.lng\n            }\n        }\n    }\n    /**\n     * Get the current address from the default map position and set those values in the state\n     */\n    componentDidMount() {\n        Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\n            response => {\n                const address = response.results[0].formatted_address,\n                    addressArray =  response.results[0].address_components,\n                    city = this.getCity( addressArray ),\n                    area = this.getArea( addressArray ),\n                    state = this.getState( addressArray );\n\n                console.log( 'city', city, area, state );\n\n                this.setState( {\n                    address: ( address ) ? address : '',\n                    area: ( area ) ? area : '',\n                    city: ( city ) ? city : '',\n                    state: ( state ) ? state : '',\n                } )\n            },\n            error => {\n                console.error(error);\n            }\n        );\n    };\n    /**\n     * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n     *\n     * @param nextProps\n     * @param nextState\n     * @return {boolean}\n     */\n    shouldComponentUpdate( nextProps, nextState ){\n        if (\n            this.state.markerPosition.lat !== this.props.center.lat ||\n            this.state.address !== nextState.address ||\n            this.state.city !== nextState.city ||\n            this.state.area !== nextState.area ||\n            this.state.state !== nextState.state\n        ) {\n            return true\n        } else if ( this.props.center.lat === nextProps.center.lat ){\n            return false\n        }\n    }\n    /**\n     * Get the city and set the city input value to the one selected\n     *\n     * @param addressArray\n     * @return {string}\n     */\n    getCity = ( addressArray ) => {\n        let city = '';\n        for( let i = 0; i < addressArray.length; i++ ) {\n            if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\n                city = addressArray[ i ].long_name;\n                return city;\n            }\n        }\n    };\n    /**\n     * Get the area and set the area input value to the one selected\n     *\n     * @param addressArray\n     * @return {string}\n     */\n    getArea = ( addressArray ) => {\n        let area = '';\n        for( let i = 0; i < addressArray.length; i++ ) {\n            if ( addressArray[ i ].types[0]  ) {\n                for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\n                    if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\n                        area = addressArray[ i ].long_name;\n                        return area;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Get the address and set the address input value to the one selected\n     *\n     * @param addressArray\n     * @return {string}\n     */\n    getState = ( addressArray ) => {\n        let state = '';\n        for( let i = 0; i < addressArray.length; i++ ) {\n            for( let i = 0; i < addressArray.length; i++ ) {\n                if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\n                    state = addressArray[ i ].long_name;\n                    return state;\n                }\n            }\n        }\n    };\n    /**\n     * And function for city,state and address input\n     * @param event\n     */\n    onChange = ( event ) => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n    /**\n     * This Event triggers when the marker window is closed\n     *\n     * @param event\n     */\n    onInfoWindowClose = ( event ) => {\n    };\n    /**\n     * When the user types an address in the search box\n     * @param place\n     */\n    onPlaceSelected = ( place ) => {\n        const address = place.formatted_address,\n            addressArray =  place.address_components,\n            city = this.getCity( addressArray ),\n            area = this.getArea( addressArray ),\n            state = this.getState( addressArray ),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng();\n// Set these values in the state.\n        this.setState({\n            address: ( address ) ? address : '',\n            area: ( area ) ? area : '',\n            city: ( city ) ? city : '',\n            state: ( state ) ? state : '',\n            markerPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n            mapPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n        })\n    };\n    /**\n     * When the marker is dragged you get the lat and long using the functions available from event object.\n     * Use geocode to get the address, city, area and state from the lat and lng positions.\n     * And then set those values in the state.\n     *\n     * @param event\n     */\n    onMarkerDragEnd = ( event ) => {\n        console.log( 'event', event );\n        let newLat = event.latLng.lat(),\n            newLng = event.latLng.lng(),\n            addressArray = [];\n        Geocode.fromLatLng( newLat , newLng ).then(\n            response => {\n                const address = response.results[0].formatted_address,\n                    addressArray =  response.results[0].address_components,\n                    city = this.getCity( addressArray ),\n                    area = this.getArea( addressArray ),\n                    state = this.getState( addressArray );\n                this.setState( {\n                    address: ( address ) ? address : '',\n                    area: ( area ) ? area : '',\n                    city: ( city ) ? city : '',\n                    state: ( state ) ? state : ''\n                } )\n            },\n            error => {\n                console.error(error);\n            }\n        );\n    };\n    render(){\n        const AsyncMap = withScriptjs(\n            withGoogleMap(\n                props => (\n                    <GoogleMap google={this.props.google}\n                               defaultZoom={this.props.zoom}\n                               defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n                    >\n                        {/* For Auto complete Search Box */}\n                        <Autocomplete\n                            style={{\n                                width: '100%',\n                                height: '40px',\n                                paddingLeft: '16px',\n                                marginTop: '2px',\n                                marginBottom: '100px'\n                            }}\n                            onPlaceSelected={ this.onPlaceSelected }\n                            types={['(regions)']}\n                        />\n                        {/*Marker*/}\n                        <Marker google={this.props.google}\n                                name={'Dolores park'}\n                                draggable={true}\n                                onDragEnd={ this.onMarkerDragEnd }\n                                position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n                        />\n                        <Marker />\n                        {/* InfoWindow on top of marker */}\n                        <InfoWindow\n                            onClose={this.onInfoWindowClose}\n                            position={{ lat: ( this.state.markerPosition.lat + 0.0018 ), lng: this.state.markerPosition.lng }}\n                        >\n                            <div>\n                                <span style={{ padding: 0, margin: 0 }}>{ this.state.address }</span>\n                            </div>\n                        </InfoWindow>\n                    </GoogleMap>\n                )\n            )\n        );\n        let map;\n        if( this.props.center.lat !== undefined ) {\n            map = <div>\n                <div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"\">City</label>\n                        <input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"\">Area</label>\n                        <input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"\">State</label>\n                        <input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"\">Address</label>\n                        <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\n                    </div>\n                </div>\n                <AsyncMap\n                    googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0&libraries=places\"\n                    loadingElement={\n                        <div style={{ height: `100%` }} />\n                    }\n                    containerElement={\n                        <div style={{ height: this.props.height }} />\n                    }\n                    mapElement={\n                        <div style={{ height: `100%` }} />\n                    }\n                />\n            </div>\n        } else {\n            map = <div style={{height: this.props.height}} />\n        }\n        return( map )\n    }\n}\nexport default Map\n"]},"metadata":{},"sourceType":"module"}
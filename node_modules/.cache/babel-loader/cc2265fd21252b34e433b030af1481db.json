{"ast":null,"code":"var _jsxFileName = \"/Users/alaaeldin/Documents/GitHub/TazweedTestSellerPanel/src/components/Appointments.js\";\nimport React, { Component } from 'react';\nimport { Table } from \"react-bootstrap\";\nimport baseService from \"../services/baseService\";\nimport ConfirmationModal from \"./ConfirmationModal\";\n\nclass Appointments extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      appointments: [],\n      show: false,\n      selectedAppointment: {}\n    };\n\n    this.eventClicked = e => {\n      alert(e);\n    };\n\n    this.close = () => {\n      this.setState({\n        show: false\n      });\n    };\n\n    this.updateAppointmentStatus = async status => {\n      let newAppointment = this.state.selectedAppointment;\n      newAppointment.status = status;\n      await baseService.updateAppointment(newAppointment);\n    };\n\n    this.accept = () => {\n      this.updateAppointmentStatus('Accepted');\n      this.close();\n    };\n\n    this.reject = () => {\n      this.updateAppointmentStatus('Rejected');\n      this.close();\n    };\n\n    this.timeConvert = time => {\n      //expecting array of 2 times\n      let newTime = time.split(' to ');\n      newTime.map((singleTime, index) => {\n        // Check correct time format and split into components\n        singleTime = singleTime.toString().match(/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\n\n        if (singleTime.length > 1) {\n          // If time format correct\n          singleTime = singleTime.slice(1); // Remove full string match value\n\n          singleTime[5] = +singleTime[0] < 12 ? 'AM' : 'PM'; // Set AM/PM\n\n          singleTime[0] = +singleTime[0] % 12 || 12; // Adjust hours\n        }\n\n        newTime[index] = singleTime.join('');\n        if (index === 0) newTime[index] += \" to \";\n      }); //apply (to) string\n\n      return newTime; // return adjusted time or original string\n    };\n  }\n\n  componentWillMount() {\n    baseService.getAppointments().then(response => {\n      this.setState({\n        appointments: response\n      });\n    }).catch(err => console.log(err));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Appointments\"), React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"#\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Username\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Request Date\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Appointment Time\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Appointment Date\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Status\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Actions\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.state.appointments.length > 0 ? this.state.appointments.map((singleAppointment, index) => {\n      return React.createElement(\"tr\", {\n        onClick: () => this.setState({\n          selectedAppointment: singleAppointment,\n          show: true\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, index + 1), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, singleAppointment.clientId.username), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, singleAppointment.requestDate), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, this.timeConvert(singleAppointment.time)), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, singleAppointment.appointmentDate), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, singleAppointment.status), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Take Action\")));\n    }) : React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \" \", React.createElement(\"td\", {\n      colSpan: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"there is no appointments yet\"))))), React.createElement(ConfirmationModal, {\n      show: this.state.show,\n      close: this.close,\n      accept: this.accept,\n      reject: this.reject,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Appointments;","map":{"version":3,"sources":["/Users/alaaeldin/Documents/GitHub/TazweedTestSellerPanel/src/components/Appointments.js"],"names":["React","Component","Table","baseService","ConfirmationModal","Appointments","state","appointments","show","selectedAppointment","eventClicked","e","alert","close","setState","updateAppointmentStatus","status","newAppointment","updateAppointment","accept","reject","timeConvert","time","newTime","split","map","singleTime","index","toString","match","length","slice","join","componentWillMount","getAppointments","then","response","catch","err","console","log","render","singleAppointment","clientId","username","requestDate","appointmentDate"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Table} from \"react-bootstrap\";\nimport baseService from \"../services/baseService\";\nimport ConfirmationModal from \"./ConfirmationModal\";\n\n\nclass Appointments extends Component {\n\n    state={\n        appointments:[],\n        show:false,\n        selectedAppointment:{}\n    };\n    componentWillMount() {\n        baseService.getAppointments().then((response)=>{\n            this.setState({appointments:response})\n        }).catch(err=>console.log(err))\n    }\n\n    eventClicked = (e) =>{\n        alert(e);\n    }\n\n    close = ()=>{\n        this.setState({show:false})\n    };\n    updateAppointmentStatus = async (status) =>{\n        let newAppointment = this.state.selectedAppointment;\n        newAppointment.status = status;\n        await baseService.updateAppointment(newAppointment);\n}\n    accept = () =>{\n        this.updateAppointmentStatus('Accepted')\n        this.close();\n    }\n    reject = () =>{\n        this.updateAppointmentStatus('Rejected')\n        this.close();\n    }\n    timeConvert= (time)=> {\n        //expecting array of 2 times\n        let newTime = time.split(' to ');\n        newTime.map((singleTime,index) =>{\n            // Check correct time format and split into components\n            singleTime = singleTime.toString ().match (/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\n\n            if (singleTime.length > 1) { // If time format correct\n                singleTime = singleTime.slice (1);  // Remove full string match value\n                singleTime[5] = +singleTime[0] < 12 ? 'AM' : 'PM'; // Set AM/PM\n                singleTime[0] = +singleTime[0] % 12 || 12; // Adjust hours\n            }\n\n            newTime[index]=singleTime.join('');\n            if(index ===0)\n                newTime[index]+=\" to \";\n\n\n        });\n        //apply (to) string\n\n\n        return newTime; // return adjusted time or original string\n    }\n    render() {\n        return (\n            <div>\n                <h2 >Appointments</h2>\n\n                <Table striped bordered hover>\n                    <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Username</th>\n                        <th>Request Date</th>\n                        <th>Appointment Time</th>\n                        <th>Appointment Date</th>\n                        <th>Status</th>\n                        <th>Actions</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.appointments.length > 0 ? this.state.appointments.map((singleAppointment,index) =>{\n                        return(\n\n                            <tr onClick={()=>this.setState({selectedAppointment:singleAppointment,show:true})}>\n                                <td>{index+1}</td>\n                                <td>{singleAppointment.clientId.username}</td>\n                                <td>{singleAppointment.requestDate}</td>\n                                <td>{this.timeConvert(singleAppointment.time)}</td>\n                                <td>{singleAppointment.appointmentDate}</td>\n                                <td>{singleAppointment.status}</td>\n                                <td><a>Take Action</a></td>\n                            </tr>\n                        )\n                    }) :<tr> <td colSpan={5}><center>there is no appointments yet</center></td></tr> }\n                    </tbody>\n                </Table>\n\n                <ConfirmationModal show={this.state.show} close={this.close} accept={this.accept} reject={this.reject}/>\n            </div>\n        );\n    }\n}\n\nexport default Appointments;\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from\"/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React from'react';import Sortable from'react-sortablejs';// Functional Component\nvar SortableList=function SortableList(_ref){var items=_ref.items,reOrder=_ref.reOrder,renderItem=_ref.renderItem;var sortable=null;// sortable instance\nvar listItems=items.map(function(file,index){return React.createElement(\"div\",{\"data-id\":index},renderItem(file,index));});return React.createElement(\"div\",null,React.createElement(Sortable// Sortable options (https://github.com/RubaXa/Sortable#options)\n,{options:{}// [Optional] Use ref to get the sortable instance\n// https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute\n,ref:function ref(c){if(c){sortable=c.sortable;}}// [Optional] A tag or react component to specify the wrapping element. Defaults to \"div\".\n// In a case of a react component it is required to has children in the component\n// and pass it down.\n,tag:\"div\"// [Optional] The onChange method allows you to implement a controlled component and keep\n// DOM nodes untouched. You have to change state to re-render the component.\n// @param {Array} order An ordered array of items defined by the `data-id` attribute.\n// @param {Object} sortable The sortable instance.\n// @param {Event} evt The event object.\n,onChange:function onChange(order,sortable,evt){//console.log('order ', order, '\\n sortable ', sortable, '\\n evt', evt)\n//do the sorting\nvar newIndex=evt.newIndex;var oldIndex=evt.oldIndex;//console.log('old index ',oldIndex,'\\n new Index ',newIndex)\nvar newOrderedFiles=_toConsumableArray(items);var temp=newOrderedFiles[oldIndex];newOrderedFiles[oldIndex]=newOrderedFiles[newIndex];newOrderedFiles[newIndex]=temp;//let newOrderFiles = doSorting(items,order)\n//console.log(newOrderFiles)\nreOrder(newOrderedFiles);}},listItems));};export default SortableList;","map":{"version":3,"sources":["/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/src/customComponents/SortableList.js"],"names":["React","Sortable","SortableList","items","reOrder","renderItem","sortable","listItems","map","file","index","c","order","evt","newIndex","oldIndex","newOrderedFiles","temp"],"mappings":"6IAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,kBAArB,CAEA;AACA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAAkC,IAAhCC,CAAAA,KAAgC,MAAhCA,KAAgC,CAAzBC,OAAyB,MAAzBA,OAAyB,CAAhBC,UAAgB,MAAhBA,UAAgB,CACnD,GAAIC,CAAAA,QAAQ,CAAG,IAAf,CAAqB;AAErB,GAAMC,CAAAA,SAAS,CAAGJ,KAAK,CAACK,GAAN,CAAU,SAACC,IAAD,CAAOC,KAAP,CAAiB,CAErC,MAAQ,4BAAK,UAASA,KAAd,EAAsBL,UAAU,CAACI,IAAD,CAAOC,KAAP,CAAhC,CAAR,CACH,CAHa,CAAlB,CAMA,MACI,gCAEI,oBAAC,QACG;AADJ,EAEI,OAAO,CAAE,EAET;AACA;AALJ,CAMI,GAAG,CAAE,aAACC,CAAD,CAAO,CACR,GAAIA,CAAJ,CAAO,CACHL,QAAQ,CAAGK,CAAC,CAACL,QAAb,CACH,CACJ,CAED;AACA;AACA;AAdJ,CAeI,GAAG,CAAC,KAEJ;AACA;AACA;AACA;AACA;AArBJ,CAsBI,QAAQ,CAAE,kBAACM,KAAD,CAAQN,QAAR,CAAkBO,GAAlB,CAA0B,CAChC;AACA;AACA,GAAIC,CAAAA,QAAQ,CAAGD,GAAG,CAACC,QAAnB,CACA,GAAIC,CAAAA,QAAQ,CAAGF,GAAG,CAACE,QAAnB,CACA;AACA,GAAIC,CAAAA,eAAe,oBAAOb,KAAP,CAAnB,CACA,GAAIc,CAAAA,IAAI,CAAGD,eAAe,CAACD,QAAD,CAA1B,CACAC,eAAe,CAACD,QAAD,CAAf,CAA4BC,eAAe,CAACF,QAAD,CAA3C,CACAE,eAAe,CAACF,QAAD,CAAf,CAA4BG,IAA5B,CACA;AACA;AACAb,OAAO,CAACY,eAAD,CAAP,CACH,CAnCL,EAqCKT,SArCL,CAFJ,CADJ,CA4CH,CArDD,CAwDA,cAAeL,CAAAA,YAAf","sourcesContent":["import React from 'react';\nimport Sortable from 'react-sortablejs';\n\n// Functional Component\nconst SortableList = ({items, reOrder, renderItem}) => {\n    let sortable = null; // sortable instance\n\n    const listItems = items.map((file, index) => {\n\n            return (<div data-id={index}>{renderItem(file, index)}</div>)\n        }\n    );\n\n    return (\n        <div>\n\n            <Sortable\n                // Sortable options (https://github.com/RubaXa/Sortable#options)\n                options={{}}\n\n                // [Optional] Use ref to get the sortable instance\n                // https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute\n                ref={(c) => {\n                    if (c) {\n                        sortable = c.sortable;\n                    }\n                }}\n\n                // [Optional] A tag or react component to specify the wrapping element. Defaults to \"div\".\n                // In a case of a react component it is required to has children in the component\n                // and pass it down.\n                tag=\"div\"\n\n                // [Optional] The onChange method allows you to implement a controlled component and keep\n                // DOM nodes untouched. You have to change state to re-render the component.\n                // @param {Array} order An ordered array of items defined by the `data-id` attribute.\n                // @param {Object} sortable The sortable instance.\n                // @param {Event} evt The event object.\n                onChange={(order, sortable, evt) => {\n                    //console.log('order ', order, '\\n sortable ', sortable, '\\n evt', evt)\n                    //do the sorting\n                    let newIndex = evt.newIndex;\n                    let oldIndex = evt.oldIndex;\n                    //console.log('old index ',oldIndex,'\\n new Index ',newIndex)\n                    let newOrderedFiles = [...items];\n                    let temp = newOrderedFiles[oldIndex];\n                    newOrderedFiles[oldIndex] = newOrderedFiles[newIndex];\n                    newOrderedFiles[newIndex] = temp;\n                    //let newOrderFiles = doSorting(items,order)\n                    //console.log(newOrderFiles)\n                    reOrder(newOrderedFiles);\n                }}\n            >\n                {listItems}\n            </Sortable>\n        </div>\n    );\n};\n\n\nexport default SortableList;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/src/customComponents/SortableList.js\";\nimport React from 'react';\nimport Sortable from 'react-sortablejs'; // Functional Component\n\nconst SortableList = ({\n  items,\n  onChange\n}) => {\n  let sortable = null; // sortable instance\n\n  const reverseOrder = evt => {\n    const order = sortable.toArray();\n    onChange(order.reverse());\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(ReactSortable // Sortable options (https://github.com/RubaXa/Sortable#options)\n  , {\n    options: {} // [Optional] Use ref to get the sortable instance\n    // https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute\n    ,\n    ref: c => {\n      if (c) {\n        sortable = c.sortable;\n      }\n    } // [Optional] The onChange method allows you to implement a controlled component and keep\n    // DOM nodes untouched. You have to change state to re-render the component.\n    // @param {Array} order An ordered array of items defined by the `data-id` attribute.\n    // @param {Object} sortable The sortable instance.\n    // @param {Event} evt The event object.\n    ,\n    onChange: (order, sortable, evt) => {\n      this.props.reOrder(order);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, this.props.renderItem()));\n};\n\nSortableList.propTypes = {\n  items: React.PropTypes.array,\n  onChange: React.PropTypes.func\n};\nexport default SortableList;","map":{"version":3,"sources":["/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/src/customComponents/SortableList.js"],"names":["React","Sortable","SortableList","items","onChange","sortable","reverseOrder","evt","order","toArray","reverse","c","props","reOrder","renderItem","propTypes","PropTypes","array","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB,C,CAEA;;AACA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAyB;AAC1C,MAAIC,QAAQ,GAAG,IAAf,CAD0C,CACrB;;AACrB,QAAMC,YAAY,GAAIC,GAAD,IAAS;AAC1B,UAAMC,KAAK,GAAGH,QAAQ,CAACI,OAAT,EAAd;AACAL,IAAAA,QAAQ,CAACI,KAAK,CAACE,OAAN,EAAD,CAAR;AACH,GAHD;;AAMA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,aAAD,CACI;AADJ;AAEI,IAAA,OAAO,EAAE,EAFb,CAKI;AACA;AANJ;AAOI,IAAA,GAAG,EAAGC,CAAD,IAAO;AACR,UAAIA,CAAJ,EAAO;AACHN,QAAAA,QAAQ,GAAGM,CAAC,CAACN,QAAb;AACH;AACJ,KAXL,CAYI;AACA;AACA;AACA;AACA;AAhBJ;AAiBI,IAAA,QAAQ,EAAE,CAACG,KAAD,EAAQH,QAAR,EAAkBE,GAAlB,KAA0B;AAChC,WAAKK,KAAL,CAAWC,OAAX,CAAmBL,KAAnB;AACH,KAnBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAqBK,KAAKI,KAAL,CAAWE,UAAX,EArBL,CADJ,CADJ;AA2BH,CAnCD;;AAqCAZ,YAAY,CAACa,SAAb,GAAyB;AACrBZ,EAAAA,KAAK,EAAEH,KAAK,CAACgB,SAAN,CAAgBC,KADF;AAErBb,EAAAA,QAAQ,EAAEJ,KAAK,CAACgB,SAAN,CAAgBE;AAFL,CAAzB;AAKA,eAAehB,YAAf","sourcesContent":["import React from 'react';\nimport Sortable from 'react-sortablejs';\n\n// Functional Component\nconst SortableList = ({ items, onChange }) => {\n    let sortable = null; // sortable instance\n    const reverseOrder = (evt) => {\n        const order = sortable.toArray();\n        onChange(order.reverse());\n    };\n\n\n    return (\n        <div>\n            <ReactSortable\n                // Sortable options (https://github.com/RubaXa/Sortable#options)\n                options={{\n                }}\n\n                // [Optional] Use ref to get the sortable instance\n                // https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute\n                ref={(c) => {\n                    if (c) {\n                        sortable = c.sortable;\n                    }\n                }}\n                // [Optional] The onChange method allows you to implement a controlled component and keep\n                // DOM nodes untouched. You have to change state to re-render the component.\n                // @param {Array} order An ordered array of items defined by the `data-id` attribute.\n                // @param {Object} sortable The sortable instance.\n                // @param {Event} evt The event object.\n                onChange={(order, sortable, evt) => {\n                    this.props.reOrder(order);\n                }}\n            >\n                {this.props.renderItem()}\n            </ReactSortable>\n        </div>\n    );\n};\n\nSortableList.propTypes = {\n    items: React.PropTypes.array,\n    onChange: React.PropTypes.func\n};\n\nexport default SortableList;\n"]},"metadata":{},"sourceType":"module"}
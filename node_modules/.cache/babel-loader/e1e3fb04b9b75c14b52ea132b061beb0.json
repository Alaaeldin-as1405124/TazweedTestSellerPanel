{"ast":null,"code":"var _jsxFileName = \"/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/src/components/PlaceLocationSelections.js\";\nimport React, { Component } from 'react';\nimport { Form, Button, Row, Col, ListGroup, Alert, Modal, Container, FormControl } from 'react-bootstrap';\nimport { useState, useEffect, useRef } from 'react';\nimport Media from \"./Media\";\nimport SocialMedia from \"./SocialMedia\";\nimport baseService from \"../services/baseService\";\nimport DragableList from \"../customComponents/DragableList\";\nimport SubScriptionControl from \"./SubScriptionControl\";\nimport MapView from \"../customComponents/MapView\";\nimport { confirmAlert } from 'react-confirm-alert'; // Import\n\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\n\nclass PlaceLocationSelections extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      categories: [],\n      locations: [],\n      selectedLocationId: 0,\n      selectedCategoryId: 0,\n      selectedSubCategoryId: 0,\n      selectedLocationIndex: 0,\n      selectedCategoryIndex: 0,\n      selectedSubCategoryIndex: 0\n    };\n\n    this.onLocationChange = e => {\n      console.log('onLodationChange');\n      this.setState({\n        selectedLocationIndex: e.target.selectedIndex,\n        selectedCategoryIndex: 0,\n        selectedSubCategoryIndex: 0\n      });\n    };\n\n    this.onCategoryChange = e => {\n      console.log('Category change');\n      this.setState({\n        selectedCategoryIndex: e.target.selectedIndex\n      });\n    };\n\n    this.onSubCategoryChange = e => {\n      console.log('SubCategory change');\n      this.setState({\n        selectedSubCategoryIndex: e.target.selectedIndex\n      });\n    };\n\n    this.update = () => {\n      if (this.props && this.props.update) this.props.update(this.state.selectedLocationIndex, this.state.selectedCategoryIndex, this.state.selectedSubCategoryIndex);\n    };\n\n    this.checkEdit = props => {\n      //then it's a place and we need to edit it\n      if (props && props.edit) {\n        //we have to set the selected location Indexes\n        let selectedLocationIndex = this.state.locations.findIndex(singleLocation => singleLocation._id === place.location._id);\n        let selectedCategoryIndex = this.state.locations[selectedLocationIndex].categories.findIndex(singleCategory => singleCategory._id === place.category._id);\n        let selectedSubCategoryIndex = this.state.locations[selectedLocationIndex].categories[selectedCategoryIndex].subCategories.findIndex(singleSubCategory => singleSubCategory._id === place.subCategory);\n        console.log('subCategories are ', this.state.locations[selectedLocationIndex].categories[selectedCategoryIndex].subCategories, '\\n findinng ', place.subCategory);\n        console.log('selected location index', selectedLocationIndex, '\\n categ ind', selectedCategoryIndex, '\\n sub cat index', selectedSubCategoryIndex);\n        this.setState({\n          selectedLocationIndex,\n          selectedCategoryIndex,\n          selectedSubCategoryIndex\n        });\n      }\n    };\n\n    this.checkProps = props => {\n      if (props && props.locations) {\n        this.setState({\n          locations: props.locations,\n          categories: props.categories\n        });\n        this.checkEdit(props);\n      }\n    };\n  }\n\n  componentWillMount() {\n    this.checkProps(this.props);\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.checkProps(nextProps);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Form.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      as: Col,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Please choose location\"), React.createElement(FormControl, {\n      as: 'select',\n      onChange: this.onLocationChange,\n      value: this.state.selectedLocationIndex,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.state.locations.map((location, index) => {\n      return React.createElement(\"option\", {\n        key: index,\n        value: this.state.selectedLocationIndex,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, location.name, \" / \", location.nameAr);\n    }))), React.createElement(Form.Group, {\n      as: Col,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Please choose Category\"), React.createElement(FormControl, {\n      as: 'select',\n      onChange: this.onCategoryChange,\n      value: this.state.selectedCategoryIndex,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, this.state.locations[this.state.selectedLocationIndex] && this.state.locations[this.state.selectedLocationIndex].categories.map((category, index) => {\n      return React.createElement(\"option\", {\n        key: index,\n        value: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, category.name, \" / \", category.nameAr);\n    }))), React.createElement(Form.Group, {\n      as: Col,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Choose SubCategory\"), React.createElement(FormControl, {\n      as: 'select',\n      onChange: this.onSubCategoryChange,\n      value: this.state.selectedSubCategoryIndex,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, this.state.locations[this.state.selectedLocationIndex] && this.state.locations[this.state.selectedLocationIndex].categories[this.state.selectedCategoryIndex].subCategories.map((category, index) => {\n      return React.createElement(\"option\", {\n        key: index,\n        value: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, category.name, \" / \", category.nameAr);\n    }))))));\n  }\n\n}\n\nexport default PlaceLocationSelections;","map":{"version":3,"sources":["/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/src/components/PlaceLocationSelections.js"],"names":["React","Component","Form","Button","Row","Col","ListGroup","Alert","Modal","Container","FormControl","useState","useEffect","useRef","Media","SocialMedia","baseService","DragableList","SubScriptionControl","MapView","confirmAlert","PlaceLocationSelections","state","categories","locations","selectedLocationId","selectedCategoryId","selectedSubCategoryId","selectedLocationIndex","selectedCategoryIndex","selectedSubCategoryIndex","onLocationChange","e","console","log","setState","target","selectedIndex","onCategoryChange","onSubCategoryChange","update","props","checkEdit","edit","findIndex","singleLocation","_id","place","location","singleCategory","category","subCategories","singleSubCategory","subCategory","checkProps","componentWillMount","componentWillReceiveProps","nextProps","nextContext","render","map","index","name","nameAr"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Form, Button, Row, Col, ListGroup, Alert, Modal, Container, FormControl} from 'react-bootstrap'\nimport {useState, useEffect, useRef} from 'react'\nimport Media from \"./Media\";\nimport SocialMedia from \"./SocialMedia\";\nimport baseService from \"../services/baseService\";\nimport DragableList from \"../customComponents/DragableList\";\nimport SubScriptionControl from \"./SubScriptionControl\";\nimport MapView from \"../customComponents/MapView\";\nimport {confirmAlert} from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\n\nclass PlaceLocationSelections extends Component {\n    state = {\n        categories: [],\n        locations: [],\n        selectedLocationId: 0,\n        selectedCategoryId: 0,\n        selectedSubCategoryId: 0,\n        selectedLocationIndex: 0,\n        selectedCategoryIndex: 0,\n        selectedSubCategoryIndex: 0,\n\n\n    };\n    onLocationChange = (e) => {\n        console.log('onLodationChange')\n        this.setState({selectedLocationIndex: e.target.selectedIndex,\n            selectedCategoryIndex: 0,\n            selectedSubCategoryIndex: 0})\n    };\n    onCategoryChange = (e) => {\n        console.log('Category change')\n        this.setState({selectedCategoryIndex: e.target.selectedIndex})\n    };\n    onSubCategoryChange = (e) => {\n\n        console.log('SubCategory change')\n        this.setState({selectedSubCategoryIndex: e.target.selectedIndex})\n    };\n    update = () =>{\n        if(this.props && this.props.update)\n            this.props.update(this.state.selectedLocationIndex,this.state.selectedCategoryIndex,this.state.selectedSubCategoryIndex)\n    };\n\n    checkEdit = (props) =>{\n        //then it's a place and we need to edit it\n        if(props && props.edit){\n            //we have to set the selected location Indexes\n            let selectedLocationIndex = this.state.locations.findIndex((singleLocation) => singleLocation._id === place.location._id);\n            let selectedCategoryIndex = this.state.locations[selectedLocationIndex].categories.findIndex((singleCategory) => singleCategory._id === place.category._id)\n            let selectedSubCategoryIndex = this.state.locations[selectedLocationIndex].categories[selectedCategoryIndex].subCategories.findIndex((singleSubCategory) => singleSubCategory._id === place.subCategory);\n            console.log('subCategories are ',this.state.locations[selectedLocationIndex].categories[selectedCategoryIndex].subCategories, '\\n findinng ',place.subCategory);\n            console.log('selected location index',selectedLocationIndex,'\\n categ ind',selectedCategoryIndex,'\\n sub cat index',selectedSubCategoryIndex)\n            this.setState({selectedLocationIndex,selectedCategoryIndex,selectedSubCategoryIndex})\n\n        }\n    };\n\n    checkProps = (props) => {\n        if(props && props.locations){\n            this.setState({locations:props.locations,categories:props.categories});\n            this.checkEdit(props);\n        }\n    };\n\n    componentWillMount() {\n        this.checkProps(this.props);\n\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n            this.checkProps(nextProps);\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Form.Group>\n\n                    <Form.Row>\n                        <Form.Group as={Col}>\n\n                            <Form.Label>\n                                Please choose location\n                            </Form.Label>\n                            <FormControl as={'select'} onChange={this.onLocationChange}\n                                         value={this.state.selectedLocationIndex}>\n                                {this.state.locations.map((location, index) => {\n                                    return (\n                                        <option key={index}\n                                                value={this.state.selectedLocationIndex}>{location.name} / {location.nameAr}</option>\n                                    )\n                                })}\n                            </FormControl>\n                        </Form.Group>\n\n                        <Form.Group as={Col}>\n\n                            <Form.Label>\n                                Please choose Category\n                            </Form.Label>\n                            <FormControl as={'select'}\n                                         onChange={this.onCategoryChange}\n                                         value={this.state.selectedCategoryIndex}\n                            >\n                                {this.state.locations[this.state.selectedLocationIndex] &&\n                                this.state.locations[this.state.selectedLocationIndex].categories.map((category, index) => {\n                                    return (\n                                        <option key={index}\n                                                value={index}>{category.name} / {category.nameAr}</option>\n                                    )\n                                })}\n                            </FormControl>\n                        </Form.Group>\n\n                        <Form.Group as={Col}>\n\n                            <Form.Label>\n                                Choose SubCategory\n                            </Form.Label>\n                            <FormControl as={'select'}\n                                         onChange={this.onSubCategoryChange}\n                                         value={this.state.selectedSubCategoryIndex}\n                            >\n                                {this.state.locations[this.state.selectedLocationIndex] &&\n                                this.state.locations[this.state.selectedLocationIndex].categories[this.state.selectedCategoryIndex].subCategories.map((category, index) => {\n                                    return (\n                                        <option key={index} value={index}>{category.name} / {category.nameAr}</option>\n                                    )\n                                })}\n                            </FormControl>\n                        </Form.Group>\n\n\n                    </Form.Row>\n                </Form.Group>\n\n            </div>\n        );\n    }\n}\n\nexport default PlaceLocationSelections;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/src/customComponents/MapView.js\";\nimport React, { Component } from 'react';\nimport Geosuggest from 'react-geosuggest';\nimport Autocomplete from 'react-google-autocomplete';\nimport LocationPicker from 'react-location-picker';\nimport Map from \"./Map\";\nimport { GoogleMap } from \"react-google-maps\";\n/* Default position */\n\nclass MapView extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      address: \"New Cairo\",\n      position: {\n        lat: 30.017792,\n        lng: 31.3473752\n      }\n    };\n\n    this.checkProps = props => {\n      if (props && props.location) {\n        let location = props.location;\n\n        if (location.longitude) {\n          this.setState({\n            address: location.address,\n            position: {\n              lat: location.latitude,\n              lng: location.longitude\n            }\n          });\n          console.log(this.state);\n        }\n      }\n    };\n\n    this.update = () => {\n      if (this.props && this.props.update) this.props.update(this.state.position, this.state.address);\n    };\n\n    this.handleLocationChange = ({\n      position,\n      address,\n      places\n    }) => {\n      // Set new location\n      this.setState({\n        position,\n        address\n      }, () => this.update());\n    };\n\n    this.onSuggestSelect = suggest => {\n      if (suggest && suggest.label) this.setState({\n        position: suggest.location,\n        address: suggest.label\n      }, () => this.update());\n      console.log(suggest); //this._geoSuggest.blur();\n    };\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.checkProps(nextProps);\n  }\n\n  componentWillMount() {\n    this.checkProps(this.props);\n  }\n\n  componentDidMount() {\n    this.update();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, this.state.address), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Geosuggest, {\n      style: {\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        marginTop: '2px',\n        marginBottom: '100px'\n      },\n      ref: el => this._geoSuggest = el,\n      country: 'EG',\n      onSuggestSelect: this.onSuggestSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(LocationPicker, {\n      containerElement: React.createElement(\"div\", {\n        style: {\n          height: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }),\n      mapElement: React.createElement(\"div\", {\n        style: {\n          height: '400px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }),\n      defaultPosition: {\n        lat: this.state.position.lat,\n        lng: this.state.position.lng\n      },\n      onChange: this.handleLocationChange,\n      radius: 1,\n      zoom: 15,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default MapView;","map":{"version":3,"sources":["/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/src/customComponents/MapView.js"],"names":["React","Component","Geosuggest","Autocomplete","LocationPicker","Map","GoogleMap","MapView","state","address","position","lat","lng","checkProps","props","location","longitude","setState","latitude","console","log","update","handleLocationChange","places","onSuggestSelect","suggest","label","componentWillReceiveProps","nextProps","nextContext","componentWillMount","componentDidMount","render","width","height","paddingLeft","marginTop","marginBottom","el","_geoSuggest"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Geosuggest from 'react-geosuggest';\nimport Autocomplete from 'react-google-autocomplete';\nimport LocationPicker from 'react-location-picker';\nimport Map from \"./Map\";\nimport {GoogleMap} from \"react-google-maps\";\n\n/* Default position */\n\n\nclass MapView extends Component {\n    state = {\n        address: \"New Cairo\",\n        position: {\n            lat: 30.017792,\n            lng: 31.3473752,\n        },\n\n    };\n\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        this.checkProps(nextProps);\n    }\n\n    componentWillMount() {\n        this.checkProps(this.props);\n    }\n\n    componentDidMount() {\n        this.update();\n    }\n\n    checkProps = (props) => {\n        if (props && props.location) {\n            let location = props.location;\n            if(location.longitude){\n                this.setState({\n                    address: location.address,\n                    position:{\n                        lat: location.latitude,\n                        lng: location.longitude}\n                })\n                console.log(this.state)\n            }\n\n        }\n    };\n\n    update = () => {\n        if (this.props && this.props.update)\n            this.props.update(this.state.position, this.state.address)\n    };\n\n    handleLocationChange = ({position, address, places}) =>{\n\n        // Set new location\n        this.setState({position,address}, () => this.update());\n    }\n\n    onSuggestSelect = (suggest) => {\n        if (suggest && suggest.label)\n            this.setState({position: suggest.location, address: suggest.label}, () => this.update());\n        console.log(suggest);\n\n        //this._geoSuggest.blur();\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h4>{this.state.address}</h4>\n                <div>\n                    <Geosuggest\n                        style={{\n                            width: '100%',\n                            height: '40px',\n                            paddingLeft: '16px',\n                            marginTop: '2px',\n                            marginBottom: '100px'\n                        }}\n                        ref={el => this._geoSuggest = el}\n                        country={'EG'}\n                        onSuggestSelect={this.onSuggestSelect}\n                    />\n                    <LocationPicker\n                        containerElement={<div style={{height: '100%'}}/>}\n                        mapElement={<div style={{height: '400px'}}/>}\n                        defaultPosition={{\n                            lat: this.state.position.lat,\n                            lng: this.state.position.lng\n                        }}\n                        onChange={this.handleLocationChange}\n                        radius={1}\n                        zoom={15}\n                    />\n\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MapView\n"]},"metadata":{},"sourceType":"module"}
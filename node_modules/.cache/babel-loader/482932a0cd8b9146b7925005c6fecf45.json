{"ast":null,"code":"var _jsxFileName = \"/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/src/components/Media.js\";\nimport React, { Component } from 'react';\nimport { Tabs, Tab, ListGroup, Button, Form, Col, FormControl } from 'react-bootstrap';\nimport FormData from 'form-data';\nimport DragableList from \"../customComponents/DragableList\";\nimport baseService from \"../services/baseService\";\nimport SortableList from \"../customComponents/SortableList\";\n\nclass Media extends Component {\n  constructor(props) {\n    super(props);\n\n    this._handleImageChange = async e => {\n      e.preventDefault();\n      let filesArray = Array.from(e.target.files);\n      const formData = new FormData();\n      filesArray.map(singleFile => {\n        formData.append('files[]', singleFile);\n      });\n      let response = await fetch(baseService.getApiUrl() + '/uploadMulti', {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Authorization': baseService.getToken()\n        }\n      });\n\n      if (response.ok) {\n        try {\n          let filesFetched = await response.json();\n          let files = [...this.state.files];\n          filesFetched.map(singleFile => {\n            files.push(singleFile);\n          });\n          this.setState({\n            files\n          }, () => this.update());\n        } catch (e) {\n          console.log(e);\n        }\n      } else {\n        console.log('response not ok ', response);\n      }\n    };\n\n    this.update = () => {\n      if (this.props && this.props.updateMedia) {\n        this.props.updateMedia(this.state.files);\n      }\n    };\n\n    this.removeImageFile = index => {\n      let files = [...this.state.files];\n      files.splice(index, 1);\n      this.setState({\n        files\n      }, () => {\n        this.update();\n      });\n    };\n\n    this.addExternalLink = () => {\n      //check video type and send it to the server\n      if (this.state.externalLink !== '') {\n        //check if it's a valid link\n        let link = this.state.externalLink.toString().toLowerCase();\n\n        if (link.includes('.mp4') || link.includes('youtube') || link.match(/\\.(jpeg|jpg|gif|png)$/)) {\n          let type = link.includes('.mp4') || link.includes('youtube') ? 'video' : 'image';\n          let files = [...this.state.files];\n          files.push({\n            link: this.state.externalLink,\n            type: type\n          }); //let extention = link.substr(link.lastIndexOf('.')+1,link.length)\n          //console.log(extention)\n\n          this.setState({\n            externalLink: '',\n            files\n          }, () => {\n            this.update();\n          });\n        } else {\n          alert('invalid video/image url (Accepting MP4 or Youtube link');\n          return;\n        }\n      } else alert('Please fill video link first');\n    };\n\n    this.onChange = (key, e) => {\n      this.setState({\n        [key]: e.target.value\n      });\n    };\n\n    this.state = {\n      files: [],\n      imageUrls: [],\n      videoUrls: [],\n      type: 'image',\n      externalLink: ''\n    };\n    this._handleImageChange = this._handleImageChange.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    if (nextProps.media) {\n      console.log('@media will rev props ', nextProps.media);\n      this.setState({\n        files: nextProps.media\n      });\n    }\n  }\n\n  componentWillMount() {\n    if (this.props.media) {\n      this.setState({\n        files: this.props.media\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Media\")), React.createElement(Tabs, {\n      id: \"controlled-tab-example\",\n      activeKey: this.state.type,\n      onSelect: k => this.setState({\n        type: k\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"image\",\n      title: \"Upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this._handleImageChange,\n      multiple: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }))), React.createElement(Tab, {\n      eventKey: \"video\",\n      title: \"External Link\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Add External Link\"), React.createElement(Form.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      as: Col,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      type: \"text\",\n      placeholder: \"Video/Image Link (Youtube or external media link) MP4\",\n      onChange: e => this.onChange('externalLink', e),\n      value: this.state.externalLink,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      as: Col,\n      className: 'center',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"badge-info col-6\",\n      onClick: () => this.addExternalLink(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-plus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), \" Add\")))))), React.createElement(SortableList, {\n      items: this.state.files,\n      renderItem: (file, index) => {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }, React.createElement(ListGroup.Item, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: 'row',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: 'col',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }, file.type.includes('video') && !file.link.toString().toLowerCase().includes('youtube') ? React.createElement(\"video\", {\n          style: {\n            width: 200,\n            height: 250,\n            padding: 5\n          },\n          controls: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }, React.createElement(\"source\", {\n          src: file.link,\n          type: 'video/' + file.link.substr(file.link.lastIndexOf('.') + 1, file.link.length),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }), \"Your browser does not support HTML5 video.\") : file.type.includes('video') && file.link.toString().toLowerCase().includes('youtube') && React.createElement(\"iframe\", {\n          width: \"200\",\n          height: \"250\",\n          src: file.link.replace('watch?v=', 'embed/').split('&')[0],\n          frameBorder: \"0\",\n          allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n          allowFullScreen: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          },\n          __self: this\n        }), file.type.includes('image') && React.createElement(\"img\", {\n          style: {\n            width: 100,\n            height: 100,\n            padding: 5\n          },\n          src: file.link,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        })), React.createElement(Button, {\n          variant: \"danger\",\n          onClick: () => this.removeImageFile(index),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }, \"Remove\"))));\n      },\n      reOrder: files => {\n        //prevent issue when removing\n        if (this.state.files.length === files.length) {\n          if (files[0].type === 'image') {\n            this.setState({\n              files\n            }, () => {\n              this.update();\n            });\n          } else {\n            alert('The first item must be an image');\n          }\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Media;","map":{"version":3,"sources":["/Users/alaaeldin/Documents/GitHub/gateofegyptadmin/src/components/Media.js"],"names":["React","Component","Tabs","Tab","ListGroup","Button","Form","Col","FormControl","FormData","DragableList","baseService","SortableList","Media","constructor","props","_handleImageChange","e","preventDefault","filesArray","Array","from","target","files","formData","map","singleFile","append","response","fetch","getApiUrl","method","body","headers","getToken","ok","filesFetched","json","state","push","setState","update","console","log","updateMedia","removeImageFile","index","splice","addExternalLink","externalLink","link","toString","toLowerCase","includes","match","type","alert","onChange","key","value","imageUrls","videoUrls","bind","componentWillReceiveProps","nextProps","nextContext","media","componentWillMount","render","k","file","width","height","padding","substr","lastIndexOf","length","replace","split"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Tabs, Tab, ListGroup, Button, Form, Col, FormControl} from 'react-bootstrap'\nimport FormData from 'form-data';\nimport DragableList from \"../customComponents/DragableList\";\nimport baseService from \"../services/baseService\";\nimport SortableList from \"../customComponents/SortableList\";\n\nclass Media extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            files: [],\n            imageUrls: [],\n            videoUrls: [],\n            type: 'image',\n            externalLink: '',\n        };\n        this._handleImageChange = this._handleImageChange.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n\n        if (nextProps.media) {\n            console.log('@media will rev props ',nextProps.media)\n            this.setState({files: nextProps.media})\n        }\n    }\n\n    componentWillMount() {\n        if (this.props.media) {\n            this.setState({files: this.props.media})\n        }\n    }\n\n\n    _handleImageChange = async (e) => {\n        e.preventDefault();\n        let filesArray = Array.from(e.target.files);\n        const formData = new FormData();\n        filesArray.map((singleFile) => {\n            formData.append('files[]', singleFile);\n        });\n        let response = await fetch(baseService.getApiUrl() +'/uploadMulti', {\n            method: 'POST',\n            body: formData,\n            headers: {\n                'Authorization': baseService.getToken()\n            },\n        });\n        if (response.ok) {\n\n            try {\n\n                let filesFetched = await response.json();\n                let files = [...this.state.files];\n                filesFetched.map((singleFile) => {\n                    files.push(singleFile);\n                });\n\n                this.setState({files}, () => this.update());\n            } catch (e) {\n                console.log(e)\n            }\n        } else {\n            console.log('response not ok ', response)\n        }\n\n\n    }\n\n    //TODO later relate this in each update\n    update = () => {\n        if (this.props && this.props.updateMedia) {\n            this.props.updateMedia(this.state.files);\n        }\n    }\n\n    removeImageFile = (index) => {\n        let files = [...this.state.files];\n        files.splice(index, 1);\n        this.setState({files}, () => {\n            this.update()\n        });\n    };\n\n\n    addExternalLink = () => {\n        //check video type and send it to the server\n        if (this.state.externalLink !== '') {\n            //check if it's a valid link\n            let link = this.state.externalLink.toString().toLowerCase();\n            if (link.includes('.mp4') || link.includes('youtube') || link.match(/\\.(jpeg|jpg|gif|png)$/)) {\n                let type = link.includes('.mp4') || link.includes('youtube') ? 'video' : 'image'\n                let files = [...this.state.files];\n                files.push({\n                    link: this.state.externalLink,\n                    type: type\n                });\n                //let extention = link.substr(link.lastIndexOf('.')+1,link.length)\n                //console.log(extention)\n\n                this.setState({externalLink: '', files}, () => {\n                    this.update()\n                })\n            } else {\n                alert('invalid video/image url (Accepting MP4 or Youtube link');\n                return;\n            }\n        } else\n            alert('Please fill video link first')\n    }\n\n    onChange = (key, e) => {\n        this.setState({[key]: e.target.value})\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <h2>Media</h2>\n                </div>\n\n                <Tabs id=\"controlled-tab-example\" activeKey={this.state.type} onSelect={k => this.setState({type: k})}>\n                    <Tab eventKey=\"image\" title=\"Upload\">\n                        <form>\n                            <input type=\"file\" onChange={this._handleImageChange} multiple/>\n                        </form>\n\n\n                    </Tab>\n                    <Tab eventKey=\"video\" title=\"External Link\">\n\n                        <Form.Group>\n                            <Form.Label>\n                                Add External Link\n                            </Form.Label>\n                            <Form.Row>\n                                <Form.Group as={Col}>\n                                    <Form.Control type=\"text\"\n                                                  placeholder=\"Video/Image Link (Youtube or external media link) MP4\"\n                                                  onChange={(e) => this.onChange('externalLink', e)}\n                                                  value={this.state.externalLink}\n                                    />\n                                </Form.Group>\n\n                                <Form.Group as={Col} className={'center'}>\n                                    <Button className=\"badge-info col-6\" onClick={() => this.addExternalLink()}><i\n                                        className=\"fa fa-plus\"/> Add</Button>\n                                </Form.Group>\n                            </Form.Row>\n                        </Form.Group>\n\n                    </Tab>\n\n                </Tabs>\n\n                <SortableList\n                    items={this.state.files}\n                    renderItem={(file, index) => {\n                        return (\n                            <div>\n                                <ListGroup.Item>\n                                    <div className={'row'}>\n                                        <div className={'col'}>\n                                            { (file.type.includes('video') && !file.link.toString().toLowerCase().includes('youtube')) ?\n                                                <video style={{width: 200, height: 250, padding: 5}} controls>\n                                                    <source\n                                                        src={file.link}\n                                                        type={'video/' + file.link.substr(file.link.lastIndexOf('.') + 1, file.link.length)}\n                                                    />\n                                                    Your browser does not support HTML5 video.\n                                                </video> : file.type.includes('video') && file.link.toString().toLowerCase().includes('youtube') &&\n                                                <iframe width=\"200\" height=\"250\"\n                                                        src={file.link.replace('watch?v=','embed/').split('&')[0]} frameBorder=\"0\"\n                                                        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                                                        allowFullScreen/>\n                                            }\n                                            {file.type.includes('image') &&\n                                            <img style={{width: 100, height: 100, padding: 5}} src={file.link}/>}\n\n                                        </div>\n                                        <Button variant=\"danger\"\n                                                onClick={() => this.removeImageFile(index)}>Remove</Button>\n                                    </div>\n                                </ListGroup.Item>\n                            </div>)\n                    }}\n                    reOrder={(files) => {\n                        //prevent issue when removing\n                        if (this.state.files.length === files.length) {\n                            if (files[0].type === 'image') {\n                                this.setState({files}, () => {\n                                    this.update()\n                                });\n\n                            } else {\n                                alert('The first item must be an image')\n                            }\n                        }\n\n                    }}\n\n                >\n                </SortableList>\n\n\n\n\n            </div>\n        )\n    }\n\n\n}\n\nexport default Media;\n"]},"metadata":{},"sourceType":"module"}
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("react")):"function"==typeof define&&define.amd?define(["exports","react"],t):t((e=e||self).PrettyCheckboxReact={},e.React)}(this,function(e,g){"use strict";var u="default"in g?g.default:g;function b(){return(b=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function p(r){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{},t=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(o).filter(function(e){return Object.getOwnPropertyDescriptor(o,e).enumerable}))),t.forEach(function(e){var t,n,a;t=r,a=o[n=e],n in t?Object.defineProperty(t,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[n]=a})}return r}function f(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],0<=t.indexOf(n)||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],0<=t.indexOf(n)||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function w(e){var t=null,n=e.children,a=e.render,r=e.id,o=e.color;return e.svg?t={className:"svg",node:e.svg}:e.icon?t={className:"icon",node:e.icon}:e.image&&(t={className:"image",node:e.image}),"function"==typeof n?n(t):"function"==typeof a?a(t):g.createElement("div",{className:N("state",o?O+o:null),"data-testid":"pcr-state"},t?function(e,t){return e?g.cloneElement(e,p({},e.props,{className:N(t,e.props.className)})):null}(t.node,t.className):null,g.createElement("label",{htmlFor:r},n))}var t,N=(function(e){function i(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var a=typeof n;if("string"==a||"number"==a)e.push(n);else if(Array.isArray(n)&&n.length){var r=i.apply(null,n);r&&e.push(r)}else if("object"==a)for(var o in n)l.call(n,o)&&n[o]&&e.push(o)}}return e.join(" ")}var l;l={}.hasOwnProperty,e.exports?(i.default=i,e.exports=i):window.classNames=i}(t={exports:{}},t.exports),t.exports),O="p-",m=g.forwardRef(function(e,t){var n=e.className,a=e.value,r=e.onChange,o=e.id,i=e.type,l=e.inputProps,c=e.animation,s=e.checked,u=e.disabled,p=e.locked,f=e.bigger,m=e.shape,d=e.style,h=e.plain,y=e.prettySelector,v=void 0===y?"pretty":y;if(e.icon&&e.svg||e.icon&&e.image||e.svg&&e.image)throw new Error("icon, svg, and image are mutually exclusive props; choose one");return g.createElement("div",{"data-testid":"pcr-wrapper",className:N(v,c?O+c:null,n,m?O+m:null,d?O+d:null,p?"".concat(O,"locked"):null,f?"".concat(O,"bigger"):null,h?"".concat(O,"plain"):null)},g.createElement("input",b({id:o||null,type:i,value:a,onChange:r,checked:s,disabled:u,"data-testid":"pcr-input",ref:t},l)),g.createElement(w,e))});m.displayName="Input";function c(e,t){var n=e.icon,a=e.image,r=e.svg,o="".concat(t,"default");return n?o="".concat(t,"icon"):r?o="".concat(t,"svg"):a&&(o="".concat(t,"image")),o}var n=u.forwardRef(function(e,t){var n=e.animation,a=e.className,r=f(e,["animation","className"]);if(n&&"smooth"!==n&&"pulse"!==n&&!e.icon&&!e.image&&!e.svg)throw new Error("animation '".concat(n,"' is incompatible with default checkbox styles. You must specify an icon, image, or a svg."));return u.createElement(m,b({type:"checkbox",className:N(c(e,O),e.indeterminate?"p-has-indeterminate":null,a),animation:n,ref:t},r))});n.displayName="Checkbox";var a=u.forwardRef(function(e,t){var n=e.className,a=e.name,r=e.inputProps,o=e.shape,i=void 0===o?"round":o,l=f(e,["className","name","inputProps","shape"]);return u.createElement(m,b({type:"radio",className:N(c(e,O),n),inputProps:p({},r,{name:a}),shape:i,ref:t},l))});a.displayName="Radio";var r=u.forwardRef(function(e,t){var n=e.type,a=void 0===n?"checkbox":n,r=e.shape,o=void 0===r?"outline":r,i=e.className,l=e.name,c=e.inputProps,s=f(e,["type","shape","className","name","inputProps"]);if(!o||"outline"!==o&&"fill"!==o&&"slim"!==o)throw new Error("Shape can be one of the following: outline, fill, or slim");if(!a)throw new Error("type is required to be set");if(s.animation&&"smooth"!==s.animation&&"jelly"!==s.animation&&"tada"!==s.animation)throw new Error("Switch animations can be one of the following: smooth, jelly, or tada");return u.createElement(m,b({className:N("".concat(O,"switch"),i),type:a,shape:o,ref:t,inputProps:p({},c,{name:l})},s))});r.displayName="Switch",e.Checkbox=n,e.Input=m,e.Radio=a,e.Switch=r,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/* dist/pretty-checkbox-react.es.js:1.1.0 */
import React__default,{forwardRef,createElement,cloneElement}from'react';function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}var classnames = createCommonjsModule(function (module) {
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/

/* global define */
(function () {

  var hasOwn = {}.hasOwnProperty;

  function classNames() {
    var classes = [];

    for (var i = 0; i < arguments.length; i++) {
      var arg = arguments[i];
      if (!arg) continue;
      var argType = typeof arg;

      if (argType === 'string' || argType === 'number') {
        classes.push(arg);
      } else if (Array.isArray(arg) && arg.length) {
        var inner = classNames.apply(null, arg);

        if (inner) {
          classes.push(inner);
        }
      } else if (argType === 'object') {
        for (var key in arg) {
          if (hasOwn.call(arg, key) && arg[key]) {
            classes.push(key);
          }
        }
      }
    }

    return classes.join(' ');
  }

  if (module.exports) {
    classNames.default = classNames;
    module.exports = classNames;
  } else {
    window.classNames = classNames;
  }
})();
});/**
 * The base prefix for all pretty-checkbox class names.
 */

var PREFIX = 'p-';

/**
 * Automatically append the className for icon component. This will automatically add
 * `icon` to icon prop components, `svg` to prop svg components, and `image` to
 * image prop components.
 * @param {React.Element<*>} component The component to add the className to.
 * @param {string} className The className to fill on the element.
 */
var fillClassNameForIcons = function fillClassNameForIcons(component, className) {
  if (!component) {
    return null;
  }

  return cloneElement(component, _objectSpread({}, component.props, {
    className: classnames(className, component.props.className)
  }));
};
/**
 * Handles custom or default rendering of the pretty-checkbox `div.state` class.
 */


var PrettyInputState = function PrettyInputState(props) {
  var node = null;
  var children = props.children,
      render = props.render,
      id = props.id,
      color = props.color; // yuck, needed for type refinement :(

  if (props.svg) {
    node = {
      className: 'svg',
      node: props.svg
    };
  } else if (props.icon) {
    node = {
      className: 'icon',
      node: props.icon
    };
  } else if (props.image) {
    node = {
      className: 'image',
      node: props.image
    };
  }

  if (typeof children === 'function') {
    return children(node);
  }

  if (typeof render === 'function') {
    return render(node);
  }

  return createElement("div", {
    className: classnames('state', color ? PREFIX + color : null),
    "data-testid": "pcr-state"
  }, node ? fillClassNameForIcons(node.node, node.className) : null, createElement("label", {
    htmlFor: id
  }, children));
};

var Input = forwardRef(function (props, ref) {
  var className = props.className,
      value = props.value,
      onChange = props.onChange,
      id = props.id,
      type = props.type,
      inputProps = props.inputProps,
      animation = props.animation,
      checked = props.checked,
      disabled = props.disabled,
      locked = props.locked,
      bigger = props.bigger,
      shape = props.shape,
      style = props.style,
      plain = props.plain,
      _props$prettySelector = props.prettySelector,
      prettySelector = _props$prettySelector === void 0 ? 'pretty' : _props$prettySelector;

  if (props.icon && props.svg || props.icon && props.image || props.svg && props.image) {
    throw new Error('icon, svg, and image are mutually exclusive props; choose one');
  }

  return createElement("div", {
    "data-testid": "pcr-wrapper",
    className: classnames(prettySelector, animation ? PREFIX + animation : null, className, shape ? PREFIX + shape : null, style ? PREFIX + style : null, locked ? "".concat(PREFIX, "locked") : null, bigger ? "".concat(PREFIX, "bigger") : null, plain ? "".concat(PREFIX, "plain") : null)
  }, createElement("input", _extends({
    id: id || null,
    type: type,
    value: value,
    onChange: onChange,
    checked: checked,
    disabled: disabled,
    "data-testid": "pcr-input",
    ref: ref
  }, inputProps)), // $ExpectError
  createElement(PrettyInputState, props));
});
Input.displayName = 'Input';var getBaseClassName = function getBaseClassName(_ref, PREFIX) {
  var icon = _ref.icon,
      image = _ref.image,
      svg = _ref.svg;
  var base = "".concat(PREFIX, "default");

  if (icon) {
    base = "".concat(PREFIX, "icon");
  } else if (svg) {
    base = "".concat(PREFIX, "svg");
  } else if (image) {
    base = "".concat(PREFIX, "image");
  }

  return base;
};var Checkbox = React__default.forwardRef(function (props, ref) {
  var animation = props.animation,
      className = props.className,
      rest = _objectWithoutProperties(props, ["animation", "className"]);

  if (animation && animation !== 'smooth' && animation !== 'pulse' && !props.icon && !props.image && !props.svg) {
    throw new Error("animation '".concat(animation, "' is incompatible with default checkbox styles. You must specify an icon, image, or a svg."));
  }

  return React__default.createElement(Input, _extends({
    type: "checkbox",
    className: classnames( // $ExpectError
    getBaseClassName(props, PREFIX), props.indeterminate ? 'p-has-indeterminate' : null, className),
    animation: animation,
    ref: ref
  }, rest));
});
Checkbox.displayName = 'Checkbox';var Radio = React__default.forwardRef(function (props, ref) {
  var className = props.className,
      name = props.name,
      inputProps = props.inputProps,
      _props$shape = props.shape,
      shape = _props$shape === void 0 ? 'round' : _props$shape,
      rest = _objectWithoutProperties(props, ["className", "name", "inputProps", "shape"]);

  return React__default.createElement(Input, _extends({
    type: "radio",
    className: classnames( // $ExpectError
    getBaseClassName(props, PREFIX), className),
    inputProps: _objectSpread({}, inputProps, {
      name: name
    }),
    shape: shape,
    ref: ref
  }, rest));
});
Radio.displayName = 'Radio';var Switch = React__default.forwardRef(function (props, ref) {
  var _props$type = props.type,
      type = _props$type === void 0 ? 'checkbox' : _props$type,
      _props$shape = props.shape,
      shape = _props$shape === void 0 ? 'outline' : _props$shape,
      className = props.className,
      name = props.name,
      inputProps = props.inputProps,
      rest = _objectWithoutProperties(props, ["type", "shape", "className", "name", "inputProps"]);

  if (!shape || shape !== 'outline' && shape !== 'fill' && shape !== 'slim') {
    throw new Error('Shape can be one of the following: outline, fill, or slim');
  }

  if (!type) {
    throw new Error('type is required to be set');
  }

  if (rest.animation && rest.animation !== 'smooth' && rest.animation !== 'jelly' && rest.animation !== 'tada') {
    throw new Error('Switch animations can be one of the following: smooth, jelly, or tada');
  }

  return React__default.createElement(Input, _extends({
    className: classnames("".concat(PREFIX, "switch"), className),
    type: type,
    shape: shape,
    ref: ref,
    inputProps: _objectSpread({}, inputProps, {
      name: name
    })
  }, rest));
});
Switch.displayName = 'Switch';export{Checkbox,Input,Radio,Switch};//# sourceMappingURL=data:application/json;charset=utf-8;base64,
